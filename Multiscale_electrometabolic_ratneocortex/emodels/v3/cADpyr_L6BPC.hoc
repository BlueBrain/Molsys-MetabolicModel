/*
Created by BluePyOpt(1.14.13) at 2024-07-23 05:41:40.941853
*/
{load_file("stdrun.hoc")}
{load_file("import3d.hoc")}
/*
 * Check that global parameters are the same as with the optimization
 */
proc check_parameter(/* name, expected_value, value */){
  strdef error
  if($2 != $3){
    sprint(error, "Parameter %s has different value %f != %f", $s1, $2, $3)
    execerror(error)
  }
}
proc check_simulator() {
  check_parameter("v_init", -71.49, v_init)
  check_parameter("celsius", 34, celsius)
  check_parameter("pi0_p_ion", 2.18, pi0_p_ion)
  check_parameter("po0_p_ion", 0.0, po0_p_ion)
  check_parameter("atpi0_atp_ion", 1.3846374147608125, atpi0_atp_ion)
  check_parameter("atpo0_atp_ion", 0.0, atpo0_atp_ion)
  check_parameter("adpi0_adp_ion", 0.057741408971236564, adpi0_adp_ion)
  check_parameter("adpo0_adp_ion", 0.0, adpo0_adp_ion)
  check_parameter("nai0_na_ion", 10.0, nai0_na_ion)
  check_parameter("nao0_na_ion", 140.0, nao0_na_ion)
  check_parameter("cai0_ca_ion", 5e-05, cai0_ca_ion)
  check_parameter("cao0_ca_ion", 1.5, cao0_ca_ion)
  check_parameter("cli0_cl_ion", 6.0, cli0_cl_ion)
  check_parameter("clo0_cl_ion", 130.0, clo0_cl_ion)
  check_parameter("ki0_k_ion", 140.0, ki0_k_ion)
  check_parameter("ko0_k_ion", 5.0, ko0_k_ion)
check_parameter("do_clamp_nakpump", 0.0, do_clamp_nakpump)
  check_parameter("totalpump_nakpump", 7.171512116378624e-14, totalpump_nakpump)
}

begintemplate cADpyr_L6BPC
  public init, morphology, geom_nseg_fixed, geom_nsec, getCell, getCCell, setCCell, gid, getCell
  public channel_seed, channel_seed_set
  public connect2target, clear, ASCIIrpt
  public soma, dend, apic, axon, myelin, getThreshold
  create soma[1], dend[1], apic[1], axon[1], myelin[1]
  public nSecAll, nSecSoma, nSecApical, nSecBasal, nSecMyelinated, nSecAxonalOrig, nSecAxonal
  public CellRef, synHelperList, synlist
  objref this, CellRef, segCounts, ASCIIrpt, synHelperList, synlist

  public all, somatic, apical, axonal, basal, myelinated, APC
  objref all, somatic, apical, axonal, basal, myelinated, APC


obfunc getCell(){
        return this
}

obfunc getCCell(){
	return CellRef
}
proc setCCell(){
       CellRef = $o1
}

//-----------------------------------------------------------------------------------------------

/*!
 * When clearing the model, the circular reference between Cells and CCells must be broken so the
 * entity watching reference counts can work.
 */
proc clear() { localobj nil
    CellRef = nil
}



/*!
 * @param $o1 NetCon source (can be nil)
 * @param $o2 Variable where generated NetCon will be placed
 */
proc connect2target() { //$o1 target point process, $o2 returned NetCon
  soma $o2 = new NetCon(&v(1), $o1)
  $o2.threshold = -30
}


proc init(/* args: morphology_dir, morphology_name */) {
  all = new SectionList()
  apical = new SectionList()
  axonal = new SectionList()
  basal = new SectionList()
  somatic = new SectionList()
  myelinated = new SectionList()

  synHelperList = new List()
  synlist = new List()

  //For compatibility with BBP CCells
  CellRef = this

  forall delete_section()

  gid = $1

  if(numarg() >= 3) {
    load_morphology($s2, $s3)
  } else {
    load_morphology($s2, "mtC141200C_idB.asc")
  }

  geom_nseg()
  indexSections()
    replace_axon()
  insertChannel()
  biophys()

  // Initialize channel_seed_set to avoid accidents
  channel_seed_set = 0
  // Initialize random number generators
  re_init_rng()
}

/*!
 * Assign section indices to the section voltage value.  This will be useful later for serializing
 * the sections into an array.  Note, that once the simulation begins, the voltage values will revert to actual data again.
 *
 * @param $o1 Import3d_GUI object
 */
proc indexSections() { local index
    index = 0
    forsec all {
        v(0.0001) = index
        index = index +1
    }
}

func getThreshold() { return 0.0 }

proc load_morphology(/* morphology_dir, morphology_name */) {localobj morph, import, sf, extension, commands, pyobj
  strdef morph_path
  sprint(morph_path, "%s/%s", $s1, $s2)
  sf = new StringFunctions()
  extension = new String()
  sscanf(morph_path, "%s", extension.s)

  sf.right(extension.s, sf.len(extension.s)-3)
  if(strcmp(extension.s, "ASC") == 0 ){
    extension.s = "asc"
  }
  if(strcmp(extension.s, "SWC") == 0 ){
    extension.s = "swc"
  }
  
  if( strcmp(extension.s, "asc") == 0 ) {
     morph = new Import3d_Neurolucida3()
     morph.quiet = 1
     morph.input(morph_path)

     import = new Import3d_GUI(morph, 0)
     import.instantiate(this)
  } else if( strcmp(extension.s, "swc" ) == 0) {
     morph = new Import3d_SWC_read()
     morph.quiet = 1
     morph.input(morph_path)

     import = new Import3d_GUI(morph, 0)
     import.instantiate(this)
  } else if( strcmp(extension.s, ".h5") == 0 ) {
    if(nrnpython ("from morphio_wrapper import MorphIOWrapper") == 1) {
        pyobj = new PythonObject()
        commands = pyobj.MorphIOWrapper(morph_path).morph_as_hoc()
        for i = 0, pyobj.len(commands) - 1 {
            execute(commands._[i], this)
        }
        indexSections()
        geom_nsec()
    } else {
      printf( ".h5 morphlogy used but cannot load 'morphio_wrapper'." )
      quit()
    }
  } else {
    printf(extension.s)
    printf("Unsupported file format: Morphology file has to end with .asc, .swc or .h5" )
    quit()
  }
}

/*
 * Assignment of mechanism values based on distance from the soma
 * Matches the BluePyOpt method
 */
proc distribute_distance(){local x localobj sl
  strdef stmp, distfunc, mech

  sl = $o1
  mech = $s2
  distfunc = $s3
  this.soma[0] distance(0, 0.5)
  sprint(distfunc, "%%s %s(%%f) = %s", mech, distfunc)
  forsec sl for(x, 0) {
    // use distance(x) twice for the step distribution case, e.g. for calcium hotspot
    sprint(stmp, distfunc, secname(), x, distance(x), distance(x))
    execute(stmp)
  }
}

proc geom_nseg() {
  this.geom_nsec() //To count all sections
  //TODO: geom_nseg_fixed depends on segCounts which is calculated by
  //  geom_nsec.  Can this be collapsed?
  this.geom_nseg_fixed(40)
  this.geom_nsec() //To count all sections
}

proc insertChannel() {
  forsec this.all {
    insert leak
    insert internal_ions
  }
  forsec this.apical {
    insert nakcc
    insert nakpump
    insert kcc2
    insert Ca_HVA2
    insert Ca_LVAst
    insert NaTg
    insert SKv3_1
    insert Ih
    insert SK_E2
  }
  forsec this.axonal {
    insert nakcc
    insert nakpump
    insert Ca_HVA2
    insert Ca_LVAst
    insert SKv3_1
    insert SK_E2
    insert K_Pst
    insert K_Tst
    insert NaTg
    insert Nap_Et2
  }
  forsec this.basal {
    insert nakcc
    insert nakpump
    insert kcc2
    insert Ca_HVA2
    insert Ca_LVAst
    insert Ih
  }
  forsec this.somatic {
    insert nakcc
    insert nakpump
    insert kcc2
    insert Ca_HVA2
    insert Ca_LVAst
    insert SKv3_1
    insert SK_E2
    insert K_Pst
    insert K_Tst
    insert NaTg
    insert Ih
  }
  forsec this.myelinated {
  }
}

proc biophys() {
  
  forsec CellRef.all {

    v(1) = -71.49
    celsius = 34
    pi0_p_ion = 2.18
    po0_p_ion = 0
    atpi0_atp_ion = 1.3846374147608125
    atpo0_atp_ion = 0
    adpi0_adp_ion = 0.057741408971236564
    adpo0_adp_ion = 0
    nai0_na_ion = 10
    nao0_na_ion = 140
    cai0_ca_ion = 5.0000000000000002e-05
    cao0_ca_ion = 1.5
    cli0_cl_ion = 6
    clo0_cl_ion = 130
    ki0_k_ion = 140
    ko0_k_ion = 5
        Ra = 100
    g_leak = 3.4255969491323955e-05
  }
  
  forsec CellRef.apical {
    cm = 2
    vshiftm_NaTg = 6
    vshifth_NaTg = 6
    gNaTgbar_NaTg = 0.0095685245253691771
    gSKv3_1bar_SKv3_1 = 0.002649159331495495
    gCa_HVAbar_Ca_HVA2 = 2.0235573161685955e-05
    gCa_LVAstbar_Ca_LVAst = 0.0041798873711390381
    gSK_E2bar_SK_E2 = 0.00043837873825182437
    gKCC_kcc2 = 1.3851632353895484e-05
    gNKCC_nakcc = 1.8293995621295544e-05
    decay_internal_ions = 422.72435778679949
    gamma_internal_ions = 0.024387745140624528
  }
  
  forsec CellRef.axonal {
    cm = 1
    vshifth_NaTg = 10
    slopem_NaTg = 9
    gNaTgbar_NaTg = 1.0990457288063959
    gNap_Et2bar_Nap_Et2 = 9.999999092680234e-12
    gK_Pstbar_K_Pst = 4.9999998585903427e-10
    gK_Tstbar_K_Tst = 9.9999994396249292e-11
    gSKv3_1bar_SKv3_1 = 4.9999998585903427e-10
    gCa_HVAbar_Ca_HVA2 = 9.2919282080369109e-05
    gCa_LVAstbar_Ca_LVAst = 0.00027180925725591842
    gSK_E2bar_SK_E2 = 0.012440145857940489
    gNKCC_nakcc = 1.9191771158882976e-05
    decay_internal_ions = 101.64591513631711
    gamma_internal_ions = 0.016108707457842937
  }
  
  forsec CellRef.basal {
    cm = 2
    gCa_HVAbar_Ca_HVA2 = 4.7067047988581155e-07
    gCa_LVAstbar_Ca_LVAst = 0.00096887432610317202
    gKCC_kcc2 = 0.00044594453691456704
    gNKCC_nakcc = 1.1028770840213368e-05
    decay_internal_ions = 445.27697282805872
    gamma_internal_ions = 0.097872877061474683
  }
  
  forsec CellRef.somatic {
    cm = 1
    vshiftm_NaTg = 13
    vshifth_NaTg = 15
    slopem_NaTg = 7
    gNaTgbar_NaTg = 0.032750630233932293
    gK_Pstbar_K_Pst = 1.8500172611115202
    gK_Tstbar_K_Tst = 0.070810662470022073
    gSKv3_1bar_SKv3_1 = 0.95389877643909859
    gCa_HVAbar_Ca_HVA2 = 7.7708921838084662e-05
    gCa_LVAstbar_Ca_LVAst = 0.00092321734778256018
    gSK_E2bar_SK_E2 = 0.048200537532549215
    gKCC_kcc2 = 0.00060203555642579358
    gNKCC_nakcc = 6.3055509098175511e-06
    decay_internal_ions = 248.90609336118609
    gamma_internal_ions = 0.0083535168911323468
  }
  
  forsec CellRef.myelinated {
    cm = 0.02
    decay_internal_ions = 455.50381613138268
    gamma_internal_ions = 0.082199002663248297
  }
  
  distribute_distance(CellRef.apical, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*1.3891002574706148e-05")
  distribute_distance(CellRef.basal, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*1.3891002574706148e-05")
  distribute_distance(CellRef.somatic, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*1.3891002574706148e-05")
}

func sec_count(/* SectionList */) { local nSec
  nSec = 0
  forsec $o1 {
      nSec += 1
  }
  return nSec
}

/*
 * Iterate over the section and compute how many segments should be allocate to
 * each.
 */
proc geom_nseg_fixed(/* chunkSize */) { local secIndex, chunkSize
  chunkSize = $1
  soma area(.5) // make sure diam reflects 3d points
  secIndex = 0
  forsec all {
    nseg = 1 + 2*int(L/chunkSize)
    segCounts.x[secIndex] = nseg
    secIndex += 1
  }
}

/*
 * Count up the number of sections
 */
proc geom_nsec() { local nSec
  nSecAll = sec_count(all)
  nSecSoma = sec_count(somatic)
  nSecApical = sec_count(apical)
  nSecBasal = sec_count(basal)
  nSecMyelinated = sec_count(myelinated)
  nSecAxonalOrig = nSecAxonal = sec_count(axonal)

  segCounts = new Vector()
  segCounts.resize(nSecAll)
  nSec = 0
  forsec all {
    segCounts.x[nSec] = nseg
    nSec += 1
  }
}

/*
 * Replace the axon built from the original morphology file with a stub axon
 */
    

    proc replace_axon(){ local nSec, L_chunk, dist, i1, i2, count, L_target, chunkSize, L_real localobj diams, lens

        L_target = 60  // length of stub axon
        nseg0 = 5  // number of segments for each of the two axon sections

        nseg_total = nseg0 * 2
        chunkSize = L_target/nseg_total

        nSec = 0
        forsec axonal{nSec = nSec + 1}

        // Try to grab info from original axon
        if(nSec < 3){ //At least two axon sections have to be present!

            execerror("Less than three axon sections are present! This emodel can't be run with such a morphology!")

        } else {

            diams = new Vector()
            lens = new Vector()

            access axon[0]
            axon[0] i1 = v(0.0001) // used when serializing sections prior to sim start
            axon[1] i2 = v(0.0001) // used when serializing sections prior to sim start
            axon[2] i3 = v(0.0001) // used when serializing sections prior to sim start

            count = 0
            forsec axonal{ // loop through all axon sections

                nseg = 1 + int(L/chunkSize/2.)*2  //nseg to get diameter

                for (x) {
                    if (x > 0 && x < 1) {
                        count = count + 1
                        diams.resize(count)
                        diams.x[count-1] = diam(x)
                        lens.resize(count)
                        lens.x[count-1] = L/nseg
                        if( count == nseg_total ){
                            break
                        }
                    }
                }
                if( count == nseg_total ){
                    break
                }
            }

            // get rid of the old axon
            forsec axonal{delete_section()}
            execute1("create axon[2]", CellRef)

            L_real = 0
            count = 0

            // new axon dependant on old diameters
            for i=0,1{
                access axon[i]
                L =  L_target/2
                nseg = nseg_total/2

                for (x) {
                    if (x > 0 && x < 1) {
                        diam(x) = diams.x[count]
                        L_real = L_real+lens.x[count]
                        count = count + 1
                    }
                }

                all.append()
                axonal.append()

                if (i == 0) {
                    v(0.0001) = i1
                } else {
                    v(0.0001) = i2
                }
            }

            nSecAxonal = 2
            soma[0] connect axon[0](0), 1
            axon[0] connect axon[1](0), 1

            create myelin[1]
            access myelin{
                    L = 1000
                    diam = diams.x[count-1]
                    nseg = 5
                    v(0.0001) = i3
                    all.append()
                    myelinated.append()
            }
            connect myelin(0), axon[1](1)
        }
    }




func hash_str() {localobj sf strdef right
  sf = new StringFunctions()

  right = $s1

  n_of_c = sf.len(right)

  hash = 0
  char_int = 0
  for i = 0, n_of_c - 1 {
     sscanf(right, "%c", & char_int)
     hash = (hash * 31 + char_int) % (2 ^ 31 - 1)
     sf.right(right, 1)
  }

  return hash
}

proc re_init_rng() {localobj sf
    strdef full_str, name

    sf = new StringFunctions()

    if(numarg() == 1) {
        // We received a third seed
        channel_seed = $1
        channel_seed_set = 1
    } else {
        channel_seed_set = 0
    }


}


endtemplate cADpyr_L6BPC